<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeAir</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weair.cc/"/>
  <updated>2023-07-26T15:25:41.925Z</updated>
  <id>https://weair.cc/</id>
  
  <author>
    <name>WeAir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx启用HTTP/3(QUIC)</title>
    <link href="https://weair.cc/nginx-quic/"/>
    <id>https://weair.cc/nginx-quic/</id>
    <published>2023-07-01T04:00:00.000Z</published>
    <updated>2023-07-26T15:25:41.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>Nginx 1.25.0版本以后已支持HTTP/3，直接下载源码解压编译安装即可，另需防火墙放行UDP的443端口。</p><h3 id="编译安装Boringssl"><a href="#编译安装Boringssl" class="headerlink" title="编译安装Boringssl"></a>编译安装Boringssl</h3><p>谷歌官方建议使用ninja来编译安装Boringssl，因此需先安装<strong>ninja</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip</span><br><span class="line">unzip ninja-linux.zip</span><br><span class="line">cp ninja /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/google/boringssl.git</span><br><span class="line"><span class="built_in">cd</span> boringssl/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake -GNinja ..</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure><h3 id="编译安装Nginx-QUIC"><a href="#编译安装Nginx-QUIC" class="headerlink" title="编译安装Nginx QUIC"></a>编译安装Nginx QUIC</h3><p>开启HTTP/3模块需要使用<strong>--with-http_v3_module --with-cc-opt=&quot;-I../boringssl-master/include&quot; --with-ld-opt=&quot;-L../boringssl-master/build/ssl -L../boringssl-master/build/crypto&quot;</strong>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.25.1.tar.gz</span><br><span class="line">tar -zxvf 1.25.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.25.1</span><br><span class="line">./auto/configure --prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">    --with-debug --with-http_v3_module \</span><br><span class="line">    --with-cc-opt=<span class="string">"-I../boringssl/include"</span> \</span><br><span class="line">    --with-ld-opt=<span class="string">"-L../boringssl/build/ssl \</span></span><br><span class="line"><span class="string">    -L../boringssl/build/crypto"</span> \</span><br><span class="line">    <span class="comment">#下面可以添加自己的编译参数</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编译完成后查看Nginx信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br><span class="line">nginx version: nginx/1.25.1</span><br><span class="line">built by gcc 10.2.1 20210110 (Debian 10.2.1-6)</span><br><span class="line">built with OpenSSL 1.1.1 (compatible; BoringSSL) (running with BoringSSL)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --with-debug --with-http_v3_module --with-cc-opt=-I../boringssl/include --with-ld-opt=<span class="string">'-L../boringssl/build/ssl -L../boringssl/build/crypto'</span></span><br></pre></td></tr></table></figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl;</span><br><span class="line">  listen 443 quic reuseport;</span><br><span class="line">  listen [::]:443 ssl;</span><br><span class="line">  listen [::]:443 quic reuseport;</span><br><span class="line">  http2 on;</span><br><span class="line">  server_name domain.name;</span><br><span class="line"></span><br><span class="line">  add_header Alt-Svc <span class="string">'h3=":443"; ma=86400,h3-29=":443"; ma=86400'</span>;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后重新启动Nginx。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>可以通过<a href="https://http3check.net" target="_blank" rel="noopener">http3check.net</a>等检测网站或使用浏览器查看协议检测是否启用成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;Nginx 1.25.0版本以后已支持HTTP/3，直接下载源码解压编译安装即可，另需防火墙放行UDP的443端口。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://weair.cc/tags/Nginx/"/>
    
      <category term="QUIC" scheme="https://weair.cc/tags/QUIC/"/>
    
  </entry>
  
  <entry>
    <title>注册了一个域名</title>
    <link href="https://weair.cc/register-a-domain/"/>
    <id>https://weair.cc/register-a-domain/</id>
    <published>2022-10-22T04:00:00.000Z</published>
    <updated>2022-10-22T11:10:24.788Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>又双叒叕注册了一个域名，这次这个是我的姓名拼音，是<strong>名字.姓</strong>这样的，比较坑的是，因为是欧洲那边的国别域名，刚注册完就被锁了要求验证身份，没有办法，只好硬着头皮P了英文版的身份证传了过去，谁知道居然还过了，也算是有惊无险吧。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>这个域名该用做什么呢，目前没想好（绝不是因为至今依旧是菜鸡），所以，极大概率吃灰域名+1，嗯，就这样随便挂个单页先放着吧。等下，目前唯一的用途是拿来建了一个邮箱，但是，好像目前依旧用不到来着，emmmmm……</p><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>可怜钱包里的银子又不知所踪了，我怎么就管不住这手呢（doge），嗯，今年份的文章应该也许大概可能是水完了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h3&gt;&lt;p&gt;又双叒叕注册了一个域名，这次这个是我的姓名拼音，是&lt;strong&gt;名字.姓&lt;/strong&gt;这样的，比较坑的是，因为是欧洲那边的国别域名，刚
      
    
    </summary>
    
    
      <category term="domain name" scheme="https://weair.cc/tags/domain-name/"/>
    
  </entry>
  
  <entry>
    <title>GitLab配置GitLab Pages</title>
    <link href="https://weair.cc/gitlab-pages/"/>
    <id>https://weair.cc/gitlab-pages/</id>
    <published>2021-10-14T04:00:00.000Z</published>
    <updated>2021-10-14T02:44:33.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>准备好单独的域名并设置泛域名解析，以及安装<strong>zip</strong>及<strong>unzip</strong>，配置HTTPS需提供域名的通配符证书。</p><h3 id="安装GitLab-Pages"><a href="#安装GitLab-Pages" class="headerlink" title="安装GitLab Pages"></a>安装GitLab Pages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">sudo -u git -H git <span class="built_in">clone</span> https://gitlab.com/gitlab-org/gitlab-pages.git</span><br><span class="line"><span class="built_in">cd</span> gitlab-pages</span><br><span class="line">sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITLAB_PAGES_VERSION)</span><br><span class="line">sudo -u git -H make</span><br></pre></td></tr></table></figure><h3 id="启用GitLab-Pages"><a href="#启用GitLab-Pages" class="headerlink" title="启用GitLab Pages"></a>启用GitLab Pages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"gitlab_pages_enabled=true"</span> &gt;&gt; /etc/default/gitlab</span><br></pre></td></tr></table></figure><h3 id="生成API密钥"><a href="#生成API密钥" class="headerlink" title="生成API密钥"></a>生成API密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H openssl rand -base64 32 &gt; /home/git/gitlab/gitlab-pages-secret</span><br></pre></td></tr></table></figure><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>进入<strong>/home/git/gitlab/conf</strong>目录并编辑<strong>gitlab.yml</strong>文件。</p><p>HTTP配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## GitLab Pages</span><br><span class="line">pages:</span><br><span class="line">  enabled: true</span><br><span class="line">  access_control: false</span><br><span class="line">  # The location where pages are stored (default: shared/pages).</span><br><span class="line">  # path: shared/pages</span><br><span class="line"></span><br><span class="line">  host: pages.domain.name</span><br><span class="line">  port: 80 # Set to 443 if you serve the pages with HTTPS</span><br><span class="line">  https: false # Set to true if you serve the pages with HTTPS</span><br><span class="line">  artifacts_server: false # Set to false if you want to disable online view of HTML artifacts</span><br><span class="line">  external_http: [&quot;127.0.0.1:8090&quot;]</span><br><span class="line">  secret_file: /home/git/gitlab/gitlab-pages-secret</span><br></pre></td></tr></table></figure><p>HTTPS配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## GitLab Pages</span><br><span class="line">pages:</span><br><span class="line">  enabled: true</span><br><span class="line">  access_control: false</span><br><span class="line">  # The location where pages are stored (default: shared/pages).</span><br><span class="line">  # path: shared/pages</span><br><span class="line"></span><br><span class="line">  host: pages.domain.name</span><br><span class="line">  port: 443 # Set to 443 if you serve the pages with HTTPS</span><br><span class="line">  https: true # Set to true if you serve the pages with HTTPS</span><br><span class="line">  artifacts_server: true # Set to false if you want to disable online view of HTML artifacts</span><br><span class="line">  secret_file: /home/git/gitlab/gitlab-pages-secret</span><br></pre></td></tr></table></figure><p>进入<strong>/home/git/gitlab/gitlab-pages</strong>目录并编辑<strong>gitlab-pages.conf</strong>文件。</p><p>HTTP配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen-http=:8090</span><br><span class="line">pages-root=/home/git/gitlab/shared/pages</span><br><span class="line">api-secret-key=/home/git/gitlab/gitlab-pages-secret</span><br><span class="line">pages-domain=pages.domain.name</span><br><span class="line">internal-gitlab-server=https://gitlab.domain.name</span><br></pre></td></tr></table></figure><p>HTTPS配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen-proxy=:8090</span><br><span class="line">pages-root=/home/git/gitlab/shared/pages</span><br><span class="line">api-secret-key=/home/git/gitlab/gitlab-pages-secret</span><br><span class="line">pages-domain=pages.domain.name</span><br><span class="line">internal-gitlab-server=https://gitlab.domain.name</span><br></pre></td></tr></table></figure><h3 id="配置NGINX"><a href="#配置NGINX" class="headerlink" title="配置NGINX"></a>配置NGINX</h3><p>复制<strong>/home/git/gitlab/lib/support/nginx</strong>目录下的相应的配置文件到NGINX的配置文件目录中并编辑，重启NGINX。</p><h3 id="重启GitLab"><a href="#重启GitLab" class="headerlink" title="重启GitLab"></a>重启GitLab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab restart</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">sudo /etc/init.d/gitlab restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h3&gt;&lt;p&gt;准备好单独的域名并设置泛域名解析，以及安装&lt;strong&gt;zip&lt;/strong&gt;及&lt;strong&gt;unzip&lt;/stron
      
    
    </summary>
    
    
      <category term="GitLab Pages" scheme="https://weair.cc/tags/GitLab-Pages/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions克隆、推送到私有仓库</title>
    <link href="https://weair.cc/github-actions/"/>
    <id>https://weair.cc/github-actions/</id>
    <published>2021-10-13T04:00:00.000Z</published>
    <updated>2021-10-25T07:44:31.029Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.github.com/cn/actions" title="GitHub Actions" target="_blank" rel="noopener">GitHub Actions</a>可以很方便实现CI/CD工作流，类似Travis的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。</p><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>首先生成密钥。</p><p>在当前仓库<strong>Settings-&gt;Secrets-&gt;New repository secret</strong>添加私钥。</p><p>1、在<strong>Name</strong>填写GITHUB_ACTIONS_KEY。</p><p>2、在<strong>Value</strong>填写生成的私钥。</p><p>在被克隆、推送的私有仓库<strong>Settings-&gt;Deploy keys-&gt;Add deploy key</strong>添加公钥。</p><p>1、在<strong>Title</strong>填写GITHUB_ACTIONS_PUB。</p><p>2、在<strong>Key</strong>填写生成的公钥。</p><h3 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h3><p>在当前仓库根目录下创建<strong>.github/workflows/actions.yml</strong>,编辑<strong>actions.yml</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">name: Github Actions</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">    - name: Set env</span><br><span class="line">      env:</span><br><span class="line">        ACTIONS_KEY: $&#123;&#123; secrets.GITHUB_ACTIONS_KEY &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        mkdir -p ~/.ssh/</span><br><span class="line">        echo &quot;$ACTIONS_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">        chmod 700 ~/.ssh</span><br><span class="line">        chmod 600 ~/.ssh/id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        git config --global user.name &quot;username&quot;</span><br><span class="line">        git config --global user.email &quot;user@email.com&quot;</span><br><span class="line"></span><br><span class="line">    - name: Git clone</span><br><span class="line">      run: |</span><br><span class="line">        git clone git@github.com:username/repository.git</span><br><span class="line"></span><br><span class="line">    - name: Git push</span><br><span class="line">      run: |</span><br><span class="line">        cd repository</span><br><span class="line">        git add -A</span><br><span class="line">        git commit -m &quot;commit&quot;</span><br><span class="line">        git push -u origin main</span><br></pre></td></tr></table></figure><p>然后将本仓库推送到GitHub上即可自动执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://docs.github.com/cn/actions&quot; title=&quot;GitHub Actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Actions&lt;/a&gt;可以很方便实现CI/CD工作流，类似Tr
      
    
    </summary>
    
    
      <category term="GitHub Actions" scheme="https://weair.cc/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Fail2ban不生效</title>
    <link href="https://weair.cc/fix-fail2ban-doesn&#39;t-work/"/>
    <id>https://weair.cc/fix-fail2ban-doesn&#39;t-work/</id>
    <published>2021-09-24T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为搭建了一个Gitea服务，所以开放了22端口，但是经常遭到暴力破解扫描，所以安装了Fail2ban禁掉暴力破解的IP地址。</p><p>但是使用一段时间后发现Fail2ban并没有生效禁掉暴力破解的IP地址。</p><p>开始以为是配置文件错误，修改配置文件之后依旧没有生效。</p><p>配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8</span><br><span class="line">bantime  = 259200</span><br><span class="line">findtime  = 3600</span><br><span class="line">maxretry = 3</span><br><span class="line">...</span><br><span class="line">[sshd]</span><br><span class="line">enabled = true</span><br><span class="line">port    = ssh</span><br><span class="line">filter  = sshd</span><br><span class="line">logpath = %(sshd_log)s</span><br><span class="line">backend = %(sshd_backend)s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>后来发现，更改了时区后，但是日志的时间并没有修改过来，两者的时间不一致，导致了Fail2ban不生效。</p><p>解决办法，重启日志服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart rsyslog</span><br></pre></td></tr></table></figure><p>重启完日志服务之后Fail2ban就可以正常工作了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;因为搭建了一个Gitea服务，所以开放了22端口，但是经常遭到暴力破解扫描，所以安装了Fail2ban禁掉暴力破解的IP地址。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Fail2ban" scheme="https://weair.cc/tags/Fail2ban/"/>
    
  </entry>
  
  <entry>
    <title>一个下载Pixiv指定画师的Shell脚本</title>
    <link href="https://weair.cc/shell-script/"/>
    <id>https://weair.cc/shell-script/</id>
    <published>2021-09-03T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>P站上看到有画师画得作品不错，想全部保存下来但是嫌一个一个的下载太慢，于是摸鱼造了这个轮子。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>因为API提供的数据是json格式的，所以需要先提前安装好用来处理json的命令行工具<strong>jq</strong>，另外还需要查看要下载的画师的P站ID。</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入Pixiv作者ID："</span> member_id</span><br><span class="line"><span class="keyword">if</span> [[ `curl -sSL -k https://api.obfs.dev/api/pixiv/\?<span class="built_in">type</span>\=member_illust\&amp;id\=<span class="variable">$&#123;member_id&#125;</span> | jq -r .code` = <span class="string">'422'</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"该ID不存在。\n"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [[ `curl -sSL -k https://api.obfs.dev/api/pixiv/\?<span class="built_in">type</span>\=member_illust\&amp;id\=<span class="variable">$&#123;member_id&#125;</span> | jq -r .illusts` = <span class="string">'[]'</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"该ID不存在。\n"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    mkdir ./<span class="variable">$&#123;member_id&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"下载中，请稍候……\n"</span></span><br><span class="line">illust_page=1</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ `curl -sSL -k https://api.obfs.dev/api/pixiv/\?<span class="built_in">type</span>\=member_illust\&amp;id\=<span class="variable">$&#123;member_id&#125;</span>\&amp;page\=<span class="variable">$&#123;illust_page&#125;</span> | jq -r .illusts` = <span class="string">'[]'</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        curl -sSL -k https://api.obfs.dev/api/pixiv/\?<span class="built_in">type</span>\=member_illust\&amp;id\=<span class="variable">$&#123;member_id&#125;</span>\&amp;page\=<span class="variable">$&#123;illust_page&#125;</span> | jq . | grep -E <span class="string">"\"original_image_url\":|\"original\":"</span> | sed -e <span class="string">"s/\"original_image_url\"://g;s/\"original\"://g;s/\"//g;s/[[:space:]]//g;s/i.pximg.net/i.pixiv.cat/g"</span> &gt;&gt; ./download.txt</span><br><span class="line">        <span class="built_in">let</span> illust_page++</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">cat ./download.txt | sort | uniq | tee ./download.txt &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        wget -c <span class="variable">$&#123;line&#125;</span> -P ./<span class="variable">$&#123;member_id&#125;</span></span><br><span class="line">        <span class="keyword">if</span> [ -f ./<span class="variable">$&#123;member_id&#125;</span>/`<span class="built_in">echo</span> <span class="variable">$&#123;line&#125;</span> | rev | cut -d <span class="string">"/"</span> -f 1 | rev` ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span> &lt; ./download.txt</span><br><span class="line">rm ./download.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"下载完成，共下载了`ls ./<span class="variable">$&#123;member_id&#125;</span> | wc -l`张图片。"</span></span><br></pre></td></tr></table></figure><p>或点击<a href="/script/pixiv_illust_download.sh">这里</a>下载。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>最后感谢用到的API程序<a href="https://github.com/mixmoe/HibiAPI" title="HibiAPI" target="_blank" rel="noopener">HibiAPI</a>，以及P站图片反向代理<a href="https://pixiv.cat/" title="pixiv.cat" target="_blank" rel="noopener">pixiv.cat</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;P站上看到有画师画得作品不错，想全部保存下来但是嫌一个一个的下载太慢，于是摸鱼造了这个轮子。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Shell脚本" scheme="https://weair.cc/tags/Shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>编译安装Sshwifty</title>
    <link href="https://weair.cc/install-sshwifty/"/>
    <id>https://weair.cc/install-sshwifty/</id>
    <published>2021-07-10T04:00:00.000Z</published>
    <updated>2022-05-06T09:12:05.736Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nirui/sshwifty" title="Sshwifty" target="_blank" rel="noopener">Sshwifty</a>是一个网页版的SSH &amp; Telnet客户端，可以简单的部署在你的电脑或是服务器上。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://nodejs.org/download/release/v16.0.0/node-v16.0.0-linux-x64.tar.gz</span><br><span class="line">sudo tar -zxvf node-v16.0.0-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo chown -R root.root /usr/<span class="built_in">local</span>/node-v16.0.0-linux-x64/</span><br><span class="line">sudo ln -sf /usr/<span class="built_in">local</span>/node-v16.0.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo ln -sf /usr/<span class="built_in">local</span>/node-v16.0.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo ln -sf /usr/<span class="built_in">local</span>/node-v16.0.0-linux-x64/bin/npx /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h3 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://go.dev/dl/go1.15.15.linux-amd64.tar.gz</span><br><span class="line">sudo tar -zxvf go1.15.15.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo ln -sf /usr/<span class="built_in">local</span>/go/bin/go /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo ln -sf /usr/<span class="built_in">local</span>/go/bin/gofmt /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h3 id="编译安装Sshwifty"><a href="#编译安装Sshwifty" class="headerlink" title="编译安装Sshwifty"></a>编译安装Sshwifty</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/nirui/sshwifty.git</span><br><span class="line"><span class="built_in">cd</span> sshwifty</span><br><span class="line">sudo npm install</span><br><span class="line">sudo npm run build</span><br></pre></td></tr></table></figure><p>编译完成后会在当前路径生成二进制文件<strong>sshwifty</strong>。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://github.com/nirui/sshwifty/blob/master/README.md" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/nirui/sshwifty&quot; title=&quot;Sshwifty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sshwifty&lt;/a&gt;是一个网页版的SSH &amp;amp; Telnet客户端，可以简单的部
      
    
    </summary>
    
    
      <category term="Sshwifty" scheme="https://weair.cc/tags/Sshwifty/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu添加PyCharm快捷启动方式</title>
    <link href="https://weair.cc/pycharm-quick-lanuch/"/>
    <id>https://weair.cc/pycharm-quick-lanuch/</id>
    <published>2021-03-13T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>Ubuntu安装好PyCharm后没有快捷方式，使用起来过于麻烦，所以添加一个快捷启动方式，方便使用。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/PyCharm.desktop</span><br></pre></td></tr></table></figure><p>添加如下内容并保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Type=Application</span><br><span class="line">Name=PyCharm</span><br><span class="line">GenericName=PyCharm</span><br><span class="line">Comment=The Python IDE for Professional Developers</span><br><span class="line">Exec=sh /path/PyCharm/bin/pycharm.sh</span><br><span class="line">Icon=/path/PyCharm/bin/pycharm.png</span><br><span class="line">Terminal=false</span><br><span class="line">Categories=Application;</span><br></pre></td></tr></table></figure><p>修改<strong>Exec</strong>及<strong>Icon</strong>路径为PyCharm的启动路径及图标即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;Ubuntu安装好PyCharm后没有快捷方式，使用起来过于麻烦，所以添加一个快捷启动方式，方便使用。&lt;/p&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="PyCharm" scheme="https://weair.cc/tags/PyCharm/"/>
    
  </entry>
  
  <entry>
    <title>安装HedgeDoc</title>
    <link href="https://weair.cc/install-hedgedoc/"/>
    <id>https://weair.cc/install-hedgedoc/</id>
    <published>2021-02-17T04:00:00.000Z</published>
    <updated>2021-10-27T09:11:23.645Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hedgedoc.org/" title="HedgeDoc" target="_blank" rel="noopener">Hedgedoc</a>是Hedgedoc团队的一个基于Javascript的Markdown文档实时编辑分享平台，其前身为CodiMD。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>提前安装Nginx、Docker、Docker Compose，Docker以及Docker Compose的安装可以查阅<a href="https://weair.cc/install-vaultwarden/" title="安装">这里</a>。如果开启防火墙，请放行3000端口或关闭防火墙。</p><h3 id="部署HedgeDoc"><a href="#部署HedgeDoc" class="headerlink" title="部署HedgeDoc"></a>部署HedgeDoc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hedgedoc/container.git hedgedoc-container</span><br><span class="line"><span class="built_in">cd</span> hedgedoc-container</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>然后打开<strong>ip:3000</strong>访问。</p><h3 id="配置HedgeDoc"><a href="#配置HedgeDoc" class="headerlink" title="配置HedgeDoc"></a>配置HedgeDoc</h3><p>为HedgeDoc配置域名，否则上传图片会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- CMD_DB_URL=postgres://hedgedoc:password@database:5432/hedgedoc</span><br><span class="line">- CMD_DOMAIN=domain.name</span><br><span class="line">- CMD_PROTOCOL_USESSL=true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>更多配置可查询<a href="https://docs.hedgedoc.org/configuration/" title="配置" target="_blank" rel="noopener">这里</a>。</p><h3 id="Nginx反代"><a href="#Nginx反代" class="headerlink" title="Nginx反代"></a>Nginx反代</h3><p>反向代理配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">        default upgrade;</span><br><span class="line">        &apos;&apos;      close;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        server_name domain.name;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:3000;</span><br><span class="line">                proxy_set_header Host $host; </span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">                proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /socket.io/ &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:3000;</span><br><span class="line">                proxy_set_header Host $host; </span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">                proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    ssl_certificate fullchain.pem;</span><br><span class="line">    ssl_certificate_key privkey.pem;</span><br><span class="line">    include options-ssl-nginx.conf;</span><br><span class="line">    ssl_dhparam ssl-dhparams.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx，然后就能通过域名访问了。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://docs.hedgedoc.org/" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hedgedoc.org/&quot; title=&quot;HedgeDoc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hedgedoc&lt;/a&gt;是Hedgedoc团队的一个基于Javascript的Markdown文档实时编辑分享平台
      
    
    </summary>
    
    
      <category term="HedgeDoc" scheme="https://weair.cc/tags/HedgeDoc/"/>
    
  </entry>
  
  <entry>
    <title>acme.sh申请泛域名证书</title>
    <link href="https://weair.cc/acme-sh/"/>
    <id>https://weair.cc/acme-sh/</id>
    <published>2021-01-21T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.643Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/acmesh-official/acme.sh" title="acme.sh" target="_blank" rel="noopener">acme.sh</a>实现了acme协议，可以从Let’s Encrypt生成免费的证书。</p><h3 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>acme.sh将安装在<strong>home</strong>目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/</span><br></pre></td></tr></table></figure><p>可以创建一个alias方便使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue -d domain.name -d *.domain.name --dns \</span><br><span class="line"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure><p>然后将TXT记录添加到DNS记录中，等待DNS记录生效。</p><h3 id="重新申请签发证书"><a href="#重新申请签发证书" class="headerlink" title="重新申请签发证书"></a>重新申请签发证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --renew -d domain.name -d *.domain.name \</span><br><span class="line">  --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure><p>生成的证书位于<strong>~/.acme.sh/domain.name</strong>目录下。</p><h3 id="卸载acme-sh"><a href="#卸载acme-sh" class="headerlink" title="卸载acme.sh"></a>卸载acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --uninstall</span><br><span class="line">rm -rf ~/.acme.sh</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://github.com/acmesh-official/acme.sh/wiki" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/acmesh-official/acme.sh&quot; title=&quot;acme.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;acme.sh&lt;/a&gt;实现了acme协议，可以从Let’s Encrypt
      
    
    </summary>
    
    
      <category term="acme.sh" scheme="https://weair.cc/tags/acme-sh/"/>
    
  </entry>
  
  <entry>
    <title>安装Vaultwarden</title>
    <link href="https://weair.cc/install-vaultwarden/"/>
    <id>https://weair.cc/install-vaultwarden/</id>
    <published>2020-12-09T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.699Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/dani-garcia/vaultwarden" title="vaultwarden" target="_blank" rel="noopener">Vaultwarden</a>原为Bitwarden RS，由Rust编写，是Bitwarden服务API的替代实现，并与Bitwarden客户端相兼容，是一款开源的密码管理软件。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>提前安装Nginx。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sudo bash</span><br></pre></td></tr></table></figure><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="启动Docker并设置开机启动"><a href="#启动Docker并设置开机启动" class="headerlink" title="启动Docker并设置开机启动"></a>启动Docker并设置开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="部署Vaultwarden"><a href="#部署Vaultwarden" class="headerlink" title="部署Vaultwarden"></a>部署Vaultwarden</h3><p>创建Vaultwarden的运行目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt &amp;&amp; sudo mkdir vaultwarden &amp;&amp; <span class="built_in">cd</span> vaultwarden</span><br></pre></td></tr></table></figure><h3 id="创建docker-compose配置文件"><a href="#创建docker-compose配置文件" class="headerlink" title="创建docker-compose配置文件"></a>创建docker-compose配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/vaultwarden/docker-compose.yml</span><br></pre></td></tr></table></figure><p>文件配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  vaultwarden:</span><br><span class="line">    image: vaultwarden/server:latest</span><br><span class="line">    container_name: vaultwarden</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8088:80&quot;</span><br><span class="line">      - &quot;3012:3012&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./bw-data:/data</span><br><span class="line">    environment:</span><br><span class="line">#后台管理登陆密码</span><br><span class="line">      - ADMIN_TOKEN=admin_token</span><br><span class="line">#域名配置</span><br><span class="line">      - DOMAIN=https://domain.name</span><br><span class="line">#更改workers数量</span><br><span class="line">      - ROCKET_WORKERS=20</span><br><span class="line">#禁用显示密码提示</span><br><span class="line">      - SHOW_PASSWORD_HINT=false</span><br><span class="line">#是否开启注册，自用的话自己搭建好注册后改成false</span><br><span class="line">      - SIGNUPS_ALLOWED=false</span><br><span class="line">#启用WebSocket通知</span><br><span class="line">      - WEBSOCKET_ENABLED=true</span><br><span class="line">#是否开启Web客户端</span><br><span class="line">      - WEB_VAULT_ENABLED=true</span><br><span class="line">#邮件配置</span><br><span class="line">      - SMTP_HOST=smtp.domain.name</span><br><span class="line">      - SMTP_FROM=no-reply@domain.name</span><br><span class="line">      - SMTP_PORT=587</span><br><span class="line">      - SMTP_SSL=true</span><br><span class="line">      - SMTP_USERNAME=no-reply@domain.name</span><br><span class="line">      - SMTP_PASSWORD=password</span><br></pre></td></tr></table></figure><h3 id="启动vaultwarden服务"><a href="#启动vaultwarden服务" class="headerlink" title="启动vaultwarden服务"></a>启动vaultwarden服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/vaultwarden</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>运行后会自动拉去镜像和设置Vaultwarden。</p><h3 id="关闭重启服务命令"><a href="#关闭重启服务命令" class="headerlink" title="关闭重启服务命令"></a>关闭重启服务命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down</span><br><span class="line">sudo docker-compose restart</span><br></pre></td></tr></table></figure><h3 id="Nginx反代"><a href="#Nginx反代" class="headerlink" title="Nginx反代"></a>Nginx反代</h3><p>反向代理配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8088;</span><br><span class="line">    proxy_set_header Host               $host;</span><br><span class="line">    proxy_set_header X-Real-IP          $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /notifications/hub &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:3012;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">location /notifications/hub/negotiate &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8088;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /admin &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8088;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx，然后就能通过域名访问了。</p><h3 id="Vaultwarden升级"><a href="#Vaultwarden升级" class="headerlink" title="Vaultwarden升级"></a>Vaultwarden升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/vaultwarden</span><br><span class="line">sudo docker-compose down</span><br><span class="line">sudo docker pull vaultwarden/server:latest</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://github.com/dani-garcia/vaultwarden/wiki" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/dani-garcia/vaultwarden&quot; title=&quot;vaultwarden&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vaultwarden&lt;/a&gt;原为Bitwarden RS，由Ru
      
    
    </summary>
    
    
      <category term="Vaultwarden" scheme="https://weair.cc/tags/Vaultwarden/"/>
    
  </entry>
  
  <entry>
    <title>VMware无法使用拖放功能</title>
    <link href="https://weair.cc/centos-vmware-tools/"/>
    <id>https://weair.cc/centos-vmware-tools/</id>
    <published>2020-05-22T04:00:00.000Z</published>
    <updated>2021-10-14T02:46:19.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>虚拟机安装完CentOS 7后，从宿主机向虚拟机内拖放文件提示错误无法拖放，或拖放进虚拟机后文件损坏。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>首先卸载系统自带的<strong>open-vm-tools</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove open-vm-tools</span><br></pre></td></tr></table></figure><p>关闭虚拟机，编辑虚拟机配置，找到<strong>CD/DVD(IDE)</strong>，选择使用ISO映像文件，路径一般为<strong>C:\Program Files (x86)\VMware\VMware Workstation\linux.iso</strong>，保存后重启。</p><p>进入虚拟机，选择<strong>VMware Tools</strong>光盘，复制里面的<strong>VMwareTools-xxxxx.tar.gz</strong>到主目录下并解压，进入<strong>vmware-tools-distrib</strong>目录，执行<strong>vmware-install.pl</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf VMwareTools-xxxxx.tar.gz</span><br><span class="line"><span class="built_in">cd</span> vmware-tools-distrib</span><br><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure><p>然后一路回车确认，安装完成后重启虚拟机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;虚拟机安装完CentOS 7后，从宿主机向虚拟机内拖放文件提示错误无法拖放，或拖放进虚拟机后文件损坏。&lt;/p&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;
      
    
    </summary>
    
    
      <category term="CentOS 7" scheme="https://weair.cc/tags/CentOS-7/"/>
    
      <category term="VMware-Tools" scheme="https://weair.cc/tags/VMware-Tools/"/>
    
  </entry>
  
  <entry>
    <title>GitLab配置邮件回复</title>
    <link href="https://weair.cc/gitlab-reply-by-email/"/>
    <id>https://weair.cc/gitlab-reply-by-email/</id>
    <published>2020-05-15T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/default</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'mail_room_enabled=true'</span> | sudo tee -a /etc/default/gitlab</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H editor config/gitlab.yml</span><br></pre></td></tr></table></figure><p>找到如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">## Reply by email</span><br><span class="line"># Allow users to comment on issues and merge requests by replying to notification emails.</span><br><span class="line"># For documentation on how to set this up, see http://doc.gitlab.com/ce/administration/reply_by_email.html</span><br><span class="line">incoming_email:</span><br><span class="line">  enabled: false</span><br><span class="line"></span><br><span class="line">  # The email address including the `%&#123;key&#125;` placeholder that will be replaced to reference the item being replied to.</span><br><span class="line">  # The placeholder can be omitted but if present, it must appear in the &quot;user&quot; part of the address (before the `@`).</span><br><span class="line">  # Please be aware that a placeholder is required for the Service Desk feature to work.</span><br><span class="line">  address: &quot;gitlab-incoming+%&#123;key&#125;@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">  # Email account username</span><br><span class="line">  # With third party providers, this is usually the full email address.</span><br><span class="line">  # With self-hosted email servers, this is usually the user part of the email address.</span><br><span class="line">  user: &quot;gitlab-incoming@gmail.com&quot;</span><br><span class="line">  # Email account password</span><br><span class="line">  password: &quot;[REDACTED]&quot;</span><br><span class="line"></span><br><span class="line">  # IMAP server host</span><br><span class="line">  host: &quot;imap.gmail.com&quot;</span><br><span class="line">  # IMAP server port</span><br><span class="line">  port: 993</span><br><span class="line">  # Whether the IMAP server uses SSL</span><br><span class="line">  ssl: true</span><br><span class="line">  # Whether the IMAP server uses StartTLS</span><br><span class="line">  start_tls: false</span><br><span class="line"></span><br><span class="line">  # The mailbox where incoming mail will end up. Usually &quot;inbox&quot;.</span><br><span class="line">  mailbox: &quot;inbox&quot;</span><br><span class="line">  # The IDLE command timeout.</span><br><span class="line">  idle_timeout: 60</span><br><span class="line">  # The log file path for the structured log file.</span><br><span class="line">  # Since `mail_room` is run independently of Rails, an absolute path is preferred.</span><br><span class="line">  # The default is &apos;log/mail_room_json.log&apos; relative to the root of the Rails app.</span><br><span class="line">  #</span><br><span class="line">  # log_path: log/mail_room_json.log</span><br></pre></td></tr></table></figure><p><strong>false</strong>改为<strong>true</strong>，修改回复账号密码及IMAP配置。</p><h3 id="重启GitLab"><a href="#重启GitLab" class="headerlink" title="重启GitLab"></a>重启GitLab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab restart</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">sudo /etc/init.d/gitlab restart</span><br></pre></td></tr></table></figure><h3 id="验证配置是否正确"><a href="#验证配置是否正确" class="headerlink" title="验证配置是否正确"></a>验证配置是否正确</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:incoming_email:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://docs.gitlab.com/ce/administration/reply_by_email.html" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编辑配置文件&quot;&gt;&lt;a href=&quot;#编辑配置文件&quot; class=&quot;headerlink&quot; title=&quot;编辑配置文件&quot;&gt;&lt;/a&gt;编辑配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="GitLab" scheme="https://weair.cc/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>安装minIO</title>
    <link href="https://weair.cc/install-minio/"/>
    <id>https://weair.cc/install-minio/</id>
    <published>2020-05-15T04:00:00.000Z</published>
    <updated>2021-10-14T01:57:54.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://min.io/" title="minIO" target="_blank" rel="noopener">minIO</a>是与Amazon S3兼容的云存储服务器，在Apache License v2下发布。作为对象存储，MinIO可以存储非结构化数据，例如照片、视频、日志文件、备份和容器映像。对象的最大大小为5TB。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>提前安装Nginx。</p><h3 id="创建minIO用户及目录"><a href="#创建minIO用户及目录" class="headerlink" title="创建minIO用户及目录"></a>创建minIO用户及目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd minio-user</span><br><span class="line">sudo useradd -M -s `<span class="built_in">which</span> nologin` -g minio-user minio-user</span><br><span class="line">sudo mkdir -p /data/minio</span><br><span class="line">sudo chown -R minio-user:minio-user /data/minio</span><br></pre></td></tr></table></figure><h3 id="下载minIO二进制文件"><a href="#下载minIO二进制文件" class="headerlink" title="下载minIO二进制文件"></a>下载minIO二进制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://dl.min.io/server/minio/release/linux-amd64/minio -O /usr/<span class="built_in">local</span>/bin/minio</span><br><span class="line">sudo chmod a+x /usr/<span class="built_in">local</span>/bin/minio</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>如果开启防火墙，请放行9000端口或关闭防火墙。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u minio-user /usr/<span class="built_in">local</span>/bin/minio server /data/minio</span><br></pre></td></tr></table></figure><p>然后打开<strong>ip:9000</strong>，输入回显的<strong>AccessKey</strong>以及<strong>SecretKey</strong>访问。</p><h3 id="在Linux中以service方式运行"><a href="#在Linux中以service方式运行" class="headerlink" title="在Linux中以service方式运行"></a>在Linux中以service方式运行</h3><p>官方<a href="https://github.com/minio/minio-service/blob/master/linux-systemd/minio.service" title="github" target="_blank" rel="noopener">github</a>给了示例配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/default/minio &lt;&lt; EOF</span><br><span class="line">MINIO_VOLUMES=<span class="string">"/data/minio/"</span></span><br><span class="line">MINIO_OPTS=<span class="string">"--address :9000"</span></span><br><span class="line">MINIO_ACCESS_KEY=Server-Access-Key</span><br><span class="line">MINIO_SECRET_KEY=Server-Secret-Key</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo wget https://raw.githubusercontent.com/minio/minio-service/master/linux-systemd/minio.service -O /etc/systemd/system/minio.service</span><br><span class="line">sudo chmod a+x /etc/systemd/system/minio.service</span><br></pre></td></tr></table></figure><p><strong>Server-Access-Key</strong>及<strong>Server-Secret-Key</strong>修改为自己的<strong>AccessKey</strong>及<strong>SecretKey</strong>。</p><h3 id="Nginx反代"><a href="#Nginx反代" class="headerlink" title="Nginx反代"></a>Nginx反代</h3><p>反向代理配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name domain.name;</span><br><span class="line"></span><br><span class="line">    ignore_invalid_headers off;</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">        proxy_connect_timeout 300;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">        chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://localhost:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就能通过域名访问了。</p><h3 id="启动minIO"><a href="#启动minIO" class="headerlink" title="启动minIO"></a>启动minIO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start minio</span><br></pre></td></tr></table></figure><h3 id="设置Bucket公开访问"><a href="#设置Bucket公开访问" class="headerlink" title="设置Bucket公开访问"></a>设置Bucket公开访问</h3><p>选择需要公开访问的Bucket，点击<strong>Edit policy</strong>，选为<strong>Read Only</strong>，点击<strong>Add</strong>添加，即可公开访问该Bucket中的文件。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其它问题可查询<a href="https://docs.min.io/docs/" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://min.io/&quot; title=&quot;minIO&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;minIO&lt;/a&gt;是与Amazon S3兼容的云存储服务器，在Apache License v2下发布。作为对象存储，MinIO可以
      
    
    </summary>
    
    
      <category term="minIO" scheme="https://weair.cc/tags/minIO/"/>
    
  </entry>
  
  <entry>
    <title>源码升级GitLab</title>
    <link href="https://weair.cc/upgrading-gitlab/"/>
    <id>https://weair.cc/upgrading-gitlab/</id>
    <published>2020-04-08T04:00:00.000Z</published>
    <updated>2021-10-19T03:31:36.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-编辑配置文件"><a href="#1-编辑配置文件" class="headerlink" title="1.编辑配置文件"></a>1.编辑配置文件</h3><p>进入<strong>/home/git/gitlab/conf</strong>目录并编辑<strong>gitlab.yml</strong>文件。</p><p>更改配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">  path: &quot;tmp/backups&quot;   # Relative paths are relative to Rails.root (default: tmp/backups/)</span><br><span class="line">  gitaly_backup_path: &quot;/home/git/gitaly/gitaly-backup&quot;   # Path of the gitaly-backup binary (default: searches $PATH)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2-备份"><a href="#2-备份" class="headerlink" title="2.备份"></a>2.备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</span><br></pre></td></tr></table></figure><h3 id="3-停止GitLab服务"><a href="#3-停止GitLab服务" class="headerlink" title="3.停止GitLab服务"></a>3.停止GitLab服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab stop</span><br></pre></td></tr></table></figure><h3 id="4-升级Git"><a href="#4-升级Git" class="headerlink" title="4.升级Git"></a>4.升级Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y libcurl4-openssl-dev libexpat1-dev gettext libz-dev libssl-dev libpcre2-dev build-essential</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.com/gitlab-org/gitaly.git -b &lt;X-Y-stable&gt; /tmp/gitaly</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /tmp/gitaly</span><br><span class="line">sudo make git GIT_PREFIX=/usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h3 id="5-获取最新代码"><a href="#5-获取最新代码" class="headerlink" title="5.获取最新代码"></a>5.获取最新代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H git fetch --all --prune</span><br><span class="line">sudo -u git -H git checkout -- Gemfile.lock db/structure.sql locale</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'BRANCH'改为需要升级的版本</span></span><br><span class="line">sudo -u git -H git checkout BRANCH</span><br></pre></td></tr></table></figure><h3 id="6-更新配置文件"><a href="#6-更新配置文件" class="headerlink" title="6.更新配置文件"></a>6.更新配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查GitLab配置文件</span></span><br><span class="line">git diff origin/PREVIOUS_BRANCH:config/gitlab.yml.example origin/BRANCH:config/gitlab.yml.example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查NGINX配置文件</span></span><br><span class="line"><span class="comment"># HTTPS</span></span><br><span class="line">git diff origin/PREVIOUS_BRANCH:lib/support/nginx/gitlab-ssl origin/BRANCH:lib/support/nginx/gitlab-ssl</span><br><span class="line"><span class="comment"># HTTP</span></span><br><span class="line">git diff origin/PREVIOUS_BRANCH:lib/support/nginx/gitlab origin/BRANCH:lib/support/nginx/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新启动脚本</span></span><br><span class="line">sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab</span><br></pre></td></tr></table></figure><h3 id="7-安装库、迁移数据等"><a href="#7-安装库、迁移数据等" class="headerlink" title="7.安装库、迁移数据等"></a>7.安装库、迁移数据等</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle config <span class="built_in">set</span> --<span class="built_in">local</span> deployment <span class="string">'true'</span></span><br><span class="line">sudo -u git -H bundle config <span class="built_in">set</span> --<span class="built_in">local</span> without <span class="string">'development test mysql aws kerberos'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新gem包</span></span><br><span class="line">sudo -u git -H bundle install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理旧的gem包（可选）</span></span><br><span class="line">sudo -u git -H bundle clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据迁移</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake db:migrate RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译GetText PO</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gettext:compile RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译静态文件</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake yarn:install gitlab:assets:clean gitlab:assets:compile RAILS_ENV=production NODE_ENV=production NODE_OPTIONS=<span class="string">"--max_old_space_size=4096"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理缓存文件</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake cache:clear RAILS_ENV=production</span><br></pre></td></tr></table></figure><h3 id="8-升级GitLab-Shell"><a href="#8-升级GitLab-Shell" class="headerlink" title="8.升级GitLab Shell"></a>8.升级GitLab Shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab-shell</span><br><span class="line"></span><br><span class="line">sudo -u git -H git fetch --all --tags --prune</span><br><span class="line">sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITLAB_SHELL_VERSION)</span><br><span class="line">sudo -u git -H make build</span><br></pre></td></tr></table></figure><h3 id="9-升级GitLab-Workhorse"><a href="#9-升级GitLab-Workhorse" class="headerlink" title="9.升级GitLab Workhorse"></a>9.升级GitLab Workhorse</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:workhorse:install[/home/git/gitlab-workhorse]"</span> RAILS_ENV=production</span><br></pre></td></tr></table></figure><h3 id="10-升级Gitaly"><a href="#10-升级Gitaly" class="headerlink" title="10.升级Gitaly"></a>10.升级Gitaly</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitaly</span><br><span class="line">sudo -u git -H git fetch --all --tags --prune</span><br><span class="line">sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITALY_SERVER_VERSION)</span><br><span class="line">sudo -u git -H make</span><br></pre></td></tr></table></figure><h3 id="11-升级GitLab-Pages"><a href="#11-升级GitLab-Pages" class="headerlink" title="11.升级GitLab Pages"></a>11.升级GitLab Pages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab-pages</span><br><span class="line"></span><br><span class="line">sudo -u git -H git fetch --all --tags --prune</span><br><span class="line">sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITLAB_PAGES_VERSION)</span><br><span class="line">sudo -u git -H make</span><br></pre></td></tr></table></figure><h3 id="12-启动GitLab"><a href="#12-启动GitLab" class="headerlink" title="12.启动GitLab"></a>12.启动GitLab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab start</span><br></pre></td></tr></table></figure><h3 id="13-检查GitLab状态"><a href="#13-检查GitLab状态" class="headerlink" title="13.检查GitLab状态"></a>13.检查GitLab状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:env:info RAILS_ENV=production</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>如果所有项目都是绿色，升级成功。</p><p>其它问题可查询<a href="https://docs.gitlab.com/ee/update/upgrading_from_source.html" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-编辑配置文件&quot;&gt;&lt;a href=&quot;#1-编辑配置文件&quot; class=&quot;headerlink&quot; title=&quot;1.编辑配置文件&quot;&gt;&lt;/a&gt;1.编辑配置文件&lt;/h3&gt;&lt;p&gt;进入&lt;strong&gt;/home/git/gitlab/conf&lt;/strong&gt;目录并编辑&lt;
      
    
    </summary>
    
    
      <category term="GitLab" scheme="https://weair.cc/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>CentOS修改默认启动内核</title>
    <link href="https://weair.cc/centos-change-kernel/"/>
    <id>https://weair.cc/centos-change-kernel/</id>
    <published>2020-03-22T04:00:00.000Z</published>
    <updated>2021-10-14T08:59:18.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看当前系统内核"><a href="#查看当前系统内核" class="headerlink" title="查看当前系统内核"></a>查看当前系统内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo awk -F\<span class="string">' '</span><span class="variable">$1</span>==<span class="string">"menuentry "</span> &#123;<span class="built_in">print</span> <span class="variable">$2</span>&#125;<span class="string">' /etc/grub2.cfg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CentOS Linux (3.10.0-1062.18.1.el7.x86_64) 7 (Core)</span></span><br><span class="line"><span class="string">CentOS Linux 7 Rescue 37934a904e9234509c00524a5e733795 (3.10.0-1062.18.1.el7.x86_64)</span></span><br><span class="line"><span class="string">CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core)</span></span><br><span class="line"><span class="string">CentOS Linux (0-rescue-65113b1a0d2f6087d515e6a8cd0ee7ef) 7 (Core)</span></span><br></pre></td></tr></table></figure><h3 id="设置默认启动内核"><a href="#设置默认启动内核" class="headerlink" title="设置默认启动内核"></a>设置默认启动内核</h3><p>假设修改启动内核为<strong>3.10.0-957.27.2</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default <span class="string">'CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core)'</span></span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>重启之后使用<strong>uname -r</strong>可以查看当前的系统内核。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看当前系统内核&quot;&gt;&lt;a href=&quot;#查看当前系统内核&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统内核&quot;&gt;&lt;/a&gt;查看当前系统内核&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://weair.cc/tags/CentOS/"/>
    
      <category term="Linux Kernel" scheme="https://weair.cc/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Debian修改默认启动内核</title>
    <link href="https://weair.cc/debian-change-kernel/"/>
    <id>https://weair.cc/debian-change-kernel/</id>
    <published>2020-03-22T04:00:00.000Z</published>
    <updated>2021-10-14T09:00:22.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看当前系统内核"><a href="#查看当前系统内核" class="headerlink" title="查看当前系统内核"></a>查看当前系统内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/grub/grub.cfg | grep menuentry</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ x<span class="string">"<span class="variable">$&#123;feature_menuentry_id&#125;</span>"</span> = xy ]; <span class="keyword">then</span></span><br><span class="line">  menuentry_id_option=<span class="string">"--id"</span></span><br><span class="line">  menuentry_id_option=<span class="string">""</span></span><br><span class="line"><span class="built_in">export</span> menuentry_id_option</span><br><span class="line">menuentry <span class="string">'Debian GNU/Linux'</span> --class debian --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-simple-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br><span class="line">submenu <span class="string">'Advanced options for Debian GNU/Linux'</span> <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-advanced-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br><span class="line">menuentry <span class="string">'Debian GNU/Linux, with Linux 4.9.0-12-amd64'</span> --class debian --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-4.9.0-12-amd64-advanced-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br><span class="line">menuentry <span class="string">'Debian GNU/Linux, with Linux 4.9.0-12-amd64  (recovery mode)'</span> --class debian --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-4.9.0-12-amd64-recovery-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br><span class="line">menuentry <span class="string">'Debian GNU/Linux, with Linux 4.9.0-11-amd64'</span> --class debian --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-4.9.0-11-amd64-advanced-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br><span class="line">menuentry <span class="string">'Debian GNU/Linux, with Linux 4.9.0-11-amd64 (recovery mode)'</span> --class debian --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-4.9.0-11-amd64-recovery-cdd695b0-e558-4915-ba1d-38c769fee1b1'</span> &#123;</span><br></pre></td></tr></table></figure><p>###修改grub文件</p><p>假设修改启动内核为<strong>4.9.0-11</strong>，修改文件<strong>/etc/default/grub</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">修改为</span><br><span class="line">GRUB_DEFAULT=<span class="string">"Advanced options for Debian GNU/Linux&gt;Debian GNU/Linux, with Linux 4.9.0-11-amd64"</span></span><br></pre></td></tr></table></figure><p>其中<strong>Advanced options for Debian GNU/Linux</strong>是一级菜单，<strong>Debian GNU/Linux, with Linux 4.9.0-11-amd64</strong>是二级菜单，两者之间用<strong>&gt;</strong>连接。</p><h3 id="更新grub文件"><a href="#更新grub文件" class="headerlink" title="更新grub文件"></a>更新grub文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>重启之后使用<strong>uname -r</strong>可以查看当前的系统内核。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看当前系统内核&quot;&gt;&lt;a href=&quot;#查看当前系统内核&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统内核&quot;&gt;&lt;/a&gt;查看当前系统内核&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="Linux Kernel" scheme="https://weair.cc/tags/Linux-Kernel/"/>
    
      <category term="Debian" scheme="https://weair.cc/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04安装sysv-rc-conf</title>
    <link href="https://weair.cc/ubuntu-install-sysv-rc-conf/"/>
    <id>https://weair.cc/ubuntu-install-sysv-rc-conf/</id>
    <published>2020-03-15T04:00:00.000Z</published>
    <updated>2021-10-14T02:47:30.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑Ubuntu源"><a href="#编辑Ubuntu源" class="headerlink" title="编辑Ubuntu源"></a>编辑Ubuntu源</h3><p>在软件源列表<strong>sources.list</strong>添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加内容如下</span></span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse</span><br></pre></td></tr></table></figure><h3 id="更新源并安装sysv-rc-conf"><a href="#更新源并安装sysv-rc-conf" class="headerlink" title="更新源并安装sysv-rc-conf"></a>更新源并安装sysv-rc-conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">apt install -y sysv-rc-conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编辑Ubuntu源&quot;&gt;&lt;a href=&quot;#编辑Ubuntu源&quot; class=&quot;headerlink&quot; title=&quot;编辑Ubuntu源&quot;&gt;&lt;/a&gt;编辑Ubuntu源&lt;/h3&gt;&lt;p&gt;在软件源列表&lt;strong&gt;sources.list&lt;/strong&gt;添加如下内容：
      
    
    </summary>
    
    
      <category term="Ubuntu 18.04" scheme="https://weair.cc/tags/Ubuntu-18-04/"/>
    
      <category term="sysv-rc-conf" scheme="https://weair.cc/tags/sysv-rc-conf/"/>
    
  </entry>
  
  <entry>
    <title>GitLab配置SMTP发送邮件</title>
    <link href="https://weair.cc/gitlab-configure-smtp/"/>
    <id>https://weair.cc/gitlab-configure-smtp/</id>
    <published>2020-03-08T04:00:00.000Z</published>
    <updated>2021-10-14T02:45:27.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>首先进入<strong>/home/git/gitlab/config/initializers/</strong>目录，将该目录下的<strong>smtp_settings.rb.sample</strong>复制一份并重命名为<strong>smtp_settings.rb</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab/config/initializers</span><br><span class="line">sudo -u git -H cp smtp_settings.rb.sample smtp_settings.rb</span><br></pre></td></tr></table></figure><p>编辑<strong>smtp_settings.rb</strong>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H editor smtp_settings.rb</span><br></pre></td></tr></table></figure><p>更改配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if Rails.env.production?</span><br><span class="line">  Rails.application.config.action_mailer.delivery_method = :smtp</span><br><span class="line"></span><br><span class="line">  ActionMailer::Base.delivery_method = :smtp</span><br><span class="line">  ActionMailer::Base.smtp_settings = &#123;</span><br><span class="line">    address: &quot;smtp.yandex.com&quot;,</span><br><span class="line">    port: 587,</span><br><span class="line">    user_name: &quot;gitlab@domain.name&quot;,</span><br><span class="line">    password: &quot;Password&quot;,</span><br><span class="line">    domain: &quot;domain.name&quot;,</span><br><span class="line">    authentication: :login,</span><br><span class="line">    enable_starttls_auto: true,</span><br><span class="line">    openssl_verify_mode: &apos;none&apos;</span><br><span class="line">  &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>同时编辑<strong>/home/git/gitlab/config/</strong>目录下的<strong>gitlab.yml</strong>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab/config/</span><br><span class="line">sudo -u git -H editor gitlab.yml</span><br></pre></td></tr></table></figure><p>找到如下配置并更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email_from: gitlab@domain.name</span><br><span class="line">email_display_name: GitLab</span><br><span class="line">email_reply_to: gitlab@domain.name</span><br></pre></td></tr></table></figure><h3 id="重启GitLab"><a href="#重启GitLab" class="headerlink" title="重启GitLab"></a>重启GitLab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab restart</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">sudo /etc/init.d/gitlab restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编辑配置文件&quot;&gt;&lt;a href=&quot;#编辑配置文件&quot; class=&quot;headerlink&quot; title=&quot;编辑配置文件&quot;&gt;&lt;/a&gt;编辑配置文件&lt;/h3&gt;&lt;p&gt;首先进入&lt;strong&gt;/home/git/gitlab/config/initializers/&lt;/str
      
    
    </summary>
    
    
      <category term="GitLab" scheme="https://weair.cc/tags/GitLab/"/>
    
      <category term="SMTP" scheme="https://weair.cc/tags/SMTP/"/>
    
  </entry>
  
  <entry>
    <title>源码安装GitLab</title>
    <link href="https://weair.cc/install-gitlab/"/>
    <id>https://weair.cc/install-gitlab/</id>
    <published>2020-03-04T04:00:00.000Z</published>
    <updated>2021-10-14T09:08:33.251Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://about.gitlab.com/" title="GitLab" target="_blank" rel="noopener">GitLab</a>是由GitLab Inc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。</p><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>系统为Ubuntu 20，内存至少4G，建议增加Swap交换分区解决内存不足等问题。</p><h3 id="1-安装软件包及依赖"><a href="#1-安装软件包及依赖" class="headerlink" title="1.安装软件包及依赖"></a>1.安装软件包及依赖</h3><p>安装vim编辑器并设置为默认编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y vim</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> editor /usr/bin/vim.basic</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libre2-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate rsync python-docutils pkg-config cmake runit-systemd</span><br></pre></td></tr></table></figure><p>从GitLab13.6起，需要安装Gitaly提供的Git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y libcurl4-openssl-dev libexpat1-dev gettext libz-dev libssl-dev libpcre2-dev build-essential git-core</span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.com/gitlab-org/gitaly.git -b &lt;X-Y-stable&gt; /tmp/gitaly</span><br><span class="line"><span class="built_in">cd</span> /tmp/gitaly</span><br><span class="line">sudo make git GIT_PREFIX=/usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>为了使自定义图标能够正常工作，需要安装GraphicsMagick。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y graphicsmagick</span><br></pre></td></tr></table></figure><p>为了接收邮件通知，需要安装postfix。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y postfix</span><br></pre></td></tr></table></figure><h3 id="2-Ruby"><a href="#2-Ruby" class="headerlink" title="2.Ruby"></a>2.Ruby</h3><p>运行GitLab需要使用Ruby，需要安装Ruby。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载Ruby源码并编译安装</span></span><br><span class="line">mkdir /tmp/ruby &amp;&amp; <span class="built_in">cd</span> /tmp/ruby</span><br><span class="line">curl --remote-name --progress-bar <span class="string">"https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.4.tar.gz"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'3043099089608859fc8cce7f9fdccaa1f53a462457e3838ec3b25a7d609fbc5b ruby-2.7.4.tar.gz'</span> | sha256sum -c - &amp;&amp; tar xzf ruby-2.7.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ruby-2.7.4</span><br><span class="line">./configure --<span class="built_in">disable</span>-install-rdoc --<span class="built_in">enable</span>-shared</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="3-Go"><a href="#3-Go" class="headerlink" title="3.Go"></a>3.Go</h3><p>GitLab有几个用Go编写的守护程序。要安装GitLab，需要一个Go编译器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果有旧的Go编译器的话，需要先移除掉旧版本</span></span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/go</span><br><span class="line"></span><br><span class="line">curl --remote-name --progress-bar <span class="string">"https://golang.org/dl/go1.16.9.linux-amd64.tar.gz"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'d2c095c95f63c2a3ef961000e0ecb9d81d5c68b6ece176e2a8a2db82dc02931c'</span> go1.16.9.linux-amd64.tar.gz<span class="string">' | shasum -a256 -c - &amp;&amp; sudo tar -C /usr/local -xzf go1.15.12.linux-amd64.tar.gz</span></span><br><span class="line"><span class="string">sudo ln -sf /usr/local/go/bin/&#123;go,godoc,gofmt&#125; /usr/local/bin/</span></span><br><span class="line"><span class="string">rm go1.16.9.linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="4-Node"><a href="#4-Node" class="headerlink" title="4.Node"></a>4.Node</h3><p>GitLab需要使用Node来编译JavaScript，并使用Yarn来管理JavaScript依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装node v14.x</span></span><br><span class="line">curl --location <span class="string">"https://deb.nodesource.com/setup_14.x"</span> | sudo bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure><h3 id="5-添加GitLab用户"><a href="#5-添加GitLab用户" class="headerlink" title="5.添加GitLab用户"></a>5.添加GitLab用户</h3><p>为GitLab创建一个<strong>git</strong>用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser --disabled-login --gecos <span class="string">'GitLab'</span> git</span><br></pre></td></tr></table></figure><h3 id="6-数据库"><a href="#6-数据库" class="headerlink" title="6.数据库"></a>6.数据库</h3><p>创建PostgreSQL数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y postgresql postgresql-client libpq-dev postgresql-contrib</span><br></pre></td></tr></table></figure><p>启动PostgreSQL数据库并查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql start</span><br><span class="line">sudo service postgresql status</span><br></pre></td></tr></table></figure><p>为GitLab创建数据库用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -d template1 -c <span class="string">"CREATE USER git CREATEDB;"</span></span><br></pre></td></tr></table></figure><p>创建<strong>pg_trgm</strong>扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -d template1 -c <span class="string">"CREATE EXTENSION IF NOT EXISTS pg_trgm;"</span></span><br></pre></td></tr></table></figure><p>创建<strong>btree_gist</strong>扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -d template1 -c <span class="string">"CREATE EXTENSION IF NOT EXISTS btree_gist;"</span></span><br></pre></td></tr></table></figure><p>创建数据库并赋予用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -d template1 -c <span class="string">"CREATE DATABASE gitlabhq_production OWNER git;"</span></span><br></pre></td></tr></table></figure><p>尝试使用git用户连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H psql -d gitlabhq_production</span><br></pre></td></tr></table></figure><p>检查扩展<strong>pg_trgm</strong>是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="literal">true</span> AS enabled</span><br><span class="line">FROM pg_available_extensions</span><br><span class="line">WHERE name = <span class="string">'pg_trgm'</span></span><br><span class="line">AND installed_version IS NOT NULL;</span><br></pre></td></tr></table></figure><p>如果扩展生效，则显示以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enabled</span><br><span class="line">---------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>检查扩展<strong>btree_gist</strong>是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="literal">true</span> AS enabled</span><br><span class="line">FROM pg_available_extensions</span><br><span class="line">WHERE name = <span class="string">'btress_gist'</span></span><br><span class="line">AND installed_version IS NOT NULL;</span><br></pre></td></tr></table></figure><p>如果扩展生效，则显示以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enabled</span><br><span class="line">---------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>退出数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlabhq_production&gt; \q</span><br></pre></td></tr></table></figure><p>修改Postgresql的配置文件允许机器访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/postgresql/12/main/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件末尾处</span></span><br><span class="line"><span class="comment"># "local" is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     trust</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 trust</span><br></pre></td></tr></table></figure><p>重启PostgreSQL服务。</p><h3 id="7-Redis"><a href="#7-Redis" class="headerlink" title="7.Redis"></a>7.Redis</h3><p>GitLab需要安装Redis。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>配置Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/redis/redis.conf /etc/redis/redis.conf.orig</span><br><span class="line"></span><br><span class="line">sudo sed <span class="string">'s/^port .*/port 0/'</span> /etc/redis/redis.conf.orig | sudo tee /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'unixsocket /var/run/redis/redis.sock'</span> | sudo tee -a /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'unixsocketperm 770'</span> | sudo tee -a /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /var/run/redis</span><br><span class="line">sudo chown redis:redis /var/run/redis</span><br><span class="line">sudo chmod 755 /var/run/redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d /etc/tmpfiles.d ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'d  /var/run/redis  0755  redis  redis  10d  -'</span> | sudo tee -a /etc/tmpfiles.d/redis.conf</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo service redis-server restart</span><br><span class="line"></span><br><span class="line">sudo usermod -aG redis git</span><br></pre></td></tr></table></figure><h3 id="8-GitLab"><a href="#8-GitLab" class="headerlink" title="8.GitLab"></a>8.GitLab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在git的home目录安装GitLab</span></span><br><span class="line"><span class="built_in">cd</span> /home/git</span><br></pre></td></tr></table></figure><p>下载GitLab源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H git <span class="built_in">clone</span> https://gitlab.com/gitlab-org/gitlab-foss.git -b 14-3-stable gitlab</span><br></pre></td></tr></table></figure><p>配置GitLab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line">sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑gitlab.yml修改域名、是否使用HTTPS以及git路径，修改以下配置</span></span><br><span class="line">sudo -u git -H editor config/gitlab.yml</span><br><span class="line"></span><br><span class="line">gitlab:</span><br><span class="line">  host: domain.name</span><br><span class="line">  port: 443 <span class="comment"># Set to 443 if using HTTPS, see installation.md#using-https for additional HTTPS configuration details</span></span><br><span class="line">  https: <span class="literal">true</span> <span class="comment"># Set to true if using HTTPS, see installation.md#using-https for additional HTTPS configuration details</span></span><br><span class="line">...</span><br><span class="line">git:</span><br><span class="line">  bin_path: /usr/<span class="built_in">local</span>/bin/git</span><br><span class="line"></span><br><span class="line">sudo -u git -H cp config/secrets.yml.example config/secrets.yml</span><br><span class="line">sudo -u git -H chmod 0600 config/secrets.yml</span><br><span class="line"></span><br><span class="line">sudo chown -R git <span class="built_in">log</span>/</span><br><span class="line">sudo chown -R git tmp/</span><br><span class="line">sudo chmod -R u+rwX,go-w <span class="built_in">log</span>/</span><br><span class="line">sudo chmod -R u+rwX tmp/</span><br><span class="line"></span><br><span class="line">sudo chmod -R u+rwX tmp/pids/</span><br><span class="line">sudo chmod -R u+rwX tmp/sockets/</span><br><span class="line"></span><br><span class="line">sudo -u git -H mkdir -p public/uploads/</span><br><span class="line"></span><br><span class="line">sudo chmod 0700 public/uploads</span><br><span class="line"></span><br><span class="line">sudo chmod -R u+rwX builds/</span><br><span class="line"></span><br><span class="line">sudo chmod -R u+rwX shared/artifacts/</span><br><span class="line"></span><br><span class="line">sudo chmod -R ug+rwX shared/pages/</span><br><span class="line"></span><br><span class="line">sudo -u git -H cp config/puma.rb.example config/puma.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Git全局配置</span></span><br><span class="line">sudo -u git -H git config --global core.autocrlf input</span><br><span class="line"></span><br><span class="line">sudo -u git -H git config --global gc.auto 0</span><br><span class="line"></span><br><span class="line">sudo -u git -H git config --global repack.writeBitmaps <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">sudo -u git -H git config --global receive.advertisePushOptions <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">sudo -u git -H git config --global core.fsyncObjectFiles <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">sudo -u git -H cp config/resque.yml.example config/resque.yml</span><br></pre></td></tr></table></figure><p>配置GitLab数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git cp config/database.yml.postgresql config/database.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据库配置，把secure password改成你自己的密码。</span></span><br><span class="line">sudo -u git -H editor config/database.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PRODUCTION</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">production:</span><br><span class="line">  adapter: postgresql</span><br><span class="line">  encoding: unicode</span><br><span class="line">  database: gitlabhq_production</span><br><span class="line">  username: git</span><br><span class="line">  password: <span class="string">"yourpassword"</span></span><br><span class="line">  host: localhost</span><br><span class="line"></span><br><span class="line">sudo -u git -H chmod o-rwx config/database.yml</span><br></pre></td></tr></table></figure><p>安装Gems，确保bundle的版本大于等于1.5.2小于2.X。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle config <span class="built_in">set</span> --<span class="built_in">local</span> deployment <span class="string">'true'</span></span><br><span class="line">sudo -u git -H bundle config <span class="built_in">set</span> --<span class="built_in">local</span> without <span class="string">'development test mysql aws kerberos'</span></span><br><span class="line">sudo -u git -H bundle install</span><br></pre></td></tr></table></figure><p>安装GitLab Shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:shell:install RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>安装GitLab Workhorse</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:workhorse:install[/home/git/gitlab-workhorse]"</span> RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>安装GitLab Pages</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">sudo -u git -H git <span class="built_in">clone</span> https://gitlab.com/gitlab-org/gitlab-pages.git</span><br><span class="line"><span class="built_in">cd</span> gitlab-pages</span><br><span class="line">sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITLAB_PAGES_VERSION)</span><br><span class="line">sudo -u git -H make</span><br></pre></td></tr></table></figure><p>安装Gitaly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake <span class="string">"gitlab:gitaly:install[/home/git/gitaly,/home/git/repositories]"</span> RAILS_ENV=production</span><br><span class="line"></span><br><span class="line">sudo chmod 0700 /home/git/gitlab/tmp/sockets/private</span><br><span class="line">sudo chown git /home/git/gitlab/tmp/sockets/private</span><br></pre></td></tr></table></figure><p>运行Gitaly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitlab_path=/home/git/gitlab</span><br><span class="line">gitaly_path=/home/git/gitaly</span><br><span class="line"></span><br><span class="line">sudo -u git -H sh -c <span class="string">"<span class="variable">$gitlab_path</span>/bin/daemon_with_pidfile <span class="variable">$gitlab_path</span>/tmp/pids/gitaly.pid <span class="variable">$gitaly_path</span>/gitaly <span class="variable">$gitaly_path</span>/config.toml &gt;&gt; <span class="variable">$gitlab_path</span>/log/gitaly.log 2&gt;&amp;1 &amp;"</span></span><br></pre></td></tr></table></figure><p>初始化数据库并激活高级功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置GitLab密码为你自己的密码</span></span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=yourpassword GITLAB_ROOT_EMAIL=youremail</span><br></pre></td></tr></table></figure><p>安装启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">sudo sysv-rc-conf gitlab on</span><br></pre></td></tr></table></figure><p>设置Logrotate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab</span><br></pre></td></tr></table></figure><p>检查GitLab及其环境是否配置正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:env:info RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>编译GetText PO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gettext:compile RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>编译静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H yarn install --production --pure-lockfile</span><br><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:assets:compile RAILS_ENV=production NODE_ENV=production NODE_OPTIONS=<span class="string">"--max_old_space_size=4096"</span></span><br></pre></td></tr></table></figure><p>启动GitLab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service gitlab start</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">sudo /etc/init.d/gitlab restart</span><br></pre></td></tr></table></figure><h3 id="9-NGINX"><a href="#9-NGINX" class="headerlink" title="9.NGINX"></a>9.NGINX</h3><p>NGINX是GitLab官方支持的Web服务器。安装NGINX并将GitLab的配置文件复制到NGINX的配置目录里，编辑相应文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP</span></span><br><span class="line">sudo cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS</span></span><br><span class="line">sudo cp lib/support/nginx/gitlab-ssl /etc/nginx/sites-available/gitlab-ssl</span><br></pre></td></tr></table></figure><p>测试并重启NGINX。</p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>检查GitLab状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:check RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>如果所有项目都是绿色，安装成功。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>打开<strong>ip</strong>或<strong>域名</strong>访问GitLab服务，进行后续配置。</p><p><img src="/images/install-gitlab.jpg" alt="GitLab"></p><p>其它问题可查询<a href="https://docs.gitlab.com/ee/install/installation.html#4-node" title="官方文档" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://about.gitlab.com/&quot; title=&quot;GitLab&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitLab&lt;/a&gt;是由GitLab Inc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wi
      
    
    </summary>
    
    
      <category term="GitLab" scheme="https://weair.cc/tags/GitLab/"/>
    
  </entry>
  
</feed>
